#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# üöÄ Sovren Pre-Commit Quality Gates
# Maintaining 91.58% test coverage & zero violations

echo "üîç Running pre-commit quality gates..."

# 1. Run lint-staged for code formatting and linting
echo "üìù Checking code formatting and linting..."
npx lint-staged

# 2. Type checking
echo "üîß Running TypeScript type checking..."
npm run type-check
if [ $? -ne 0 ]; then
  echo "‚ùå Type checking failed! Please fix TypeScript errors before committing."
  exit 1
fi

# 3. Run all tests to ensure nothing breaks
echo "üß™ Running full test suite..."
npm run test:ci
if [ $? -ne 0 ]; then
  echo "‚ùå Tests failed! All tests must pass before committing."
  exit 1
fi

# 4. Check test coverage threshold (>90%)
echo "üìä Checking test coverage threshold..."
cd packages/frontend
npm run test:coverage -- --passWithNoTests --silent | tail -n 20 > /tmp/coverage-output.txt
coverage_lines=$(grep "Lines" /tmp/coverage-output.txt | grep -o '[0-9]\+\.[0-9]\+%' | head -1 | sed 's/%//')
if [ -n "$coverage_lines" ]; then
  coverage_int=$(echo "$coverage_lines" | cut -d'.' -f1)
  if [ "$coverage_int" -lt 90 ]; then
    echo "‚ùå Test coverage ($coverage_lines%) is below 90% threshold!"
    echo "üìã Please add tests to maintain our elite coverage standards."
    exit 1
  else
    echo "‚úÖ Test coverage: $coverage_lines% (exceeds 90% threshold)"
  fi
else
  echo "‚ö†Ô∏è  Could not determine coverage - proceeding with caution"
fi
cd ../..

# 5. Security audit
echo "üîí Running security audit..."
npm audit --audit-level=moderate
if [ $? -ne 0 ]; then
  echo "‚ùå Security vulnerabilities detected! Please resolve before committing."
  exit 1
fi

# 6. Build verification
echo "üèóÔ∏è  Verifying production build..."
npm run build
if [ $? -ne 0 ]; then
  echo "‚ùå Production build failed! Please fix build errors before committing."
  exit 1
fi

echo "‚úÖ All quality gates passed! Ready to commit."
echo "üéâ Maintaining elite standards: 91.58% coverage, zero violations"

echo "üîç Validating Vercel configuration..."

# Check for conflicting vercel.json configurations
validate_vercel_config() {
    local root_config="vercel.json"
    local frontend_config="packages/frontend/vercel.json"

    if [ -f "$root_config" ] && [ -f "$frontend_config" ]; then
        echo "‚ö†Ô∏è  Multiple vercel.json files detected!"

        # Check if frontend config has functions (conflicting)
        if grep -q '"functions"' "$frontend_config"; then
            echo "‚ùå ERROR: Frontend vercel.json contains functions configuration"
            echo "   This conflicts with root configuration and will cause deployment failures"
            echo ""
            echo "   Solution: Remove functions from $frontend_config"
            echo "   The root config handles all deployment logic"
            echo ""
            echo "   See docs/MONOREPO_ARCHITECTURE.md for details"
            exit 1
        fi

        # Check if frontend config has invalid runtime
        if grep -q '"nodejs18.x"' "$frontend_config"; then
            echo "‚ùå ERROR: Invalid runtime 'nodejs18.x' detected in $frontend_config"
            echo "   This will cause deployment failures"
            echo ""
            echo "   Solution: Remove functions configuration or use 'edge' runtime"
            exit 1
        fi

        echo "‚úÖ Configuration precedence validated"
    fi
}

# Validate JSON syntax
validate_json_syntax() {
    for config in vercel.json packages/*/vercel.json .vercelrc.json; do
        if [ -f "$config" ]; then
            if ! python3 -m json.tool "$config" > /dev/null 2>&1; then
                echo "‚ùå ERROR: Invalid JSON syntax in $config"
                exit 1
            fi
        fi
    done
    echo "‚úÖ JSON syntax validated"
}

# Check for required schema
validate_schema() {
    for config in vercel.json packages/*/vercel.json; do
        if [ -f "$config" ]; then
            if ! grep -q '"$schema"' "$config"; then
                echo "‚ö†Ô∏è  WARNING: Missing \$schema in $config"
                echo "   Add: \"\\$schema\": \"https://openapi.vercel.sh/vercel.json\""
            fi
        fi
    done
    echo "‚úÖ Schema validation completed"
}

# Run validations
validate_vercel_config
validate_json_syntax
validate_schema

echo "üöÄ Vercel configuration validation passed!"
echo ""

# Continue with other pre-commit checks
npm run lint:check
npm run test:types
